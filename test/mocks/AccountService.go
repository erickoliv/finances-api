// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import domain "github.com/erickoliv/finances-api/domain"
import mock "github.com/stretchr/testify/mock"

import rest "github.com/erickoliv/finances-api/pkg/http/rest"
import uuid "github.com/google/uuid"

// AccountService is an autogenerated mock type for the AccountService type
type AccountService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0, _a1, _a2
func (_m *AccountService) Delete(_a0 context.Context, _a1 uuid.UUID, _a2 uuid.UUID) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0, _a1, _a2
func (_m *AccountService) Get(_a0 context.Context, _a1 uuid.UUID, _a2 uuid.UUID) (*domain.Account, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *domain.Account
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *domain.Account); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *AccountService) Insert(_a0 context.Context, _a1 *domain.Account) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Account) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query provides a mock function with given fields: _a0, _a1
func (_m *AccountService) Query(_a0 context.Context, _a1 *rest.Query) ([]domain.Account, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []domain.Account
	if rf, ok := ret.Get(0).(func(context.Context, *rest.Query) []domain.Account); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rest.Query) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AccountService) Update(_a0 context.Context, _a1 uuid.UUID, _a2 uuid.UUID, _a3 *domain.Account) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, *domain.Account) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
