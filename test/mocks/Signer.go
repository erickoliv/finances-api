// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import domain "github.com/erickoliv/finances-api/domain"
import mock "github.com/stretchr/testify/mock"

import uuid "github.com/google/uuid"

// Signer is an autogenerated mock type for the Signer type
type Signer struct {
	mock.Mock
}

// SignUser provides a mock function with given fields: ctx, user
func (_m *Signer) SignUser(ctx context.Context, user *domain.User) (string, error) {
	ret := _m.Called(ctx, user)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: ctx, token
func (_m *Signer) Validate(ctx context.Context, token string) (uuid.UUID, error) {
	ret := _m.Called(ctx, token)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, string) uuid.UUID); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
