// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import domain "github.com/erickoliv/finances-api/domain"
import mock "github.com/stretchr/testify/mock"
import rest "github.com/erickoliv/finances-api/pkg/http/rest"

import uuid "github.com/google/uuid"

// Account is an autogenerated mock type for the Account type
type Account struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, pk, owner
func (_m *Account) Delete(ctx context.Context, pk uuid.UUID, owner uuid.UUID) error {
	ret := _m.Called(ctx, pk, owner)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, pk, owner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, pk, owner
func (_m *Account) Get(ctx context.Context, pk uuid.UUID, owner uuid.UUID) (*domain.Account, error) {
	ret := _m.Called(ctx, pk, owner)

	var r0 *domain.Account
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *domain.Account); ok {
		r0 = rf(ctx, pk, owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, pk, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: ctx, filters
func (_m *Account) Query(ctx context.Context, filters *rest.Query) ([]*domain.Account, error) {
	ret := _m.Called(ctx, filters)

	var r0 []*domain.Account
	if rf, ok := ret.Get(0).(func(context.Context, *rest.Query) []*domain.Account); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rest.Query) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, account
func (_m *Account) Save(ctx context.Context, account *domain.Account) error {
	ret := _m.Called(ctx, account)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Account) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
